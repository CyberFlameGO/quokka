digraph "logical-plan" {
	graph [rankdir=BT]
	node [shape=box]
	10 [label="10<class 'pyquokka.logical.StatefulNode'>
Parents:{0: 0}
Targets:
	11 partitioner: pass_thru
	  predicate: TRUE
	  projection: None
	 batch_funcs: []"]
	0 [label="<class 'pyquokka.logical.InputDiskParquetNode'>
Predicate: [('l_shipdate', '<=', <pyarrow.TimestampScalar: datetime.datetime(1998, 9, 2, 0, 0)>)]
Projection: {'l_quantity', 'l_tax', 'l_discount', 'l_extendedprice', 'l_returnflag', 'l_linestatus'}
Targets:
	10 partitioner: broadcast
	  predicate: TRUE
	  projection: {'count_sum', 'l_discount_sum', 'l_linestatus', 'l_quantity_sum', 'l_extendedprice_sum', 'disc_price_sum', 'l_returnflag', 'charge_sum'}
	 batch_funcs: [functools.partial(<function DataStream.with_column.<locals>.polars_func at 0x7fe1f83160d0>, <function do_1.<locals>.<lambda> at 0x7fe1f8316040>), functools.partial(<function DataStream.with_column.<locals>.polars_func at 0x7fe1f8316310>, <function do_1.<locals>.<lambda> at 0x7fe1f8316160>), functools.partial(<function DataStream._grouped_aggregate.<locals>.f at 0x7fe1f8316280>, ['l_returnflag', 'l_linestatus'], [('count', 'sum'), ('l_quantity', 'sum'), ('l_extendedprice', 'sum'), ('disc_price', 'sum'), ('charge', 'sum'), ('l_discount', 'sum')])]"]
	0 -> 10
}
